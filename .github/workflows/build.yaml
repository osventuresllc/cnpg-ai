name: Build

on: push

env:
  # renovate datasource=github-releases depName=timescale/timescaledb
  TIMESCALE_VERSION: 2.17.2
  # renovate datasource=github-releases depName=pgvector/pgvector
  PGVECTOR_VERSION: 0.8.0
  # renovate datasource=github-releases depName=timescale/pgvectorscale
  PGVECTORSCALE_VERSION: 0.5.1

jobs:
  build:
    name: Build Image ${{ matrix.platform }} (pg${{ matrix.postgres_version }})
    runs-on: warp-ubuntu-latest-${{ matrix.platform }}-32x
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        platform: [amd64, arm64]
        include:
          - postgres_version: "17"
            # renovate datasource=docker depName=ghcr.io/cloudnative-pg/postgresql
            cnpg_version: 17.1-1
            latest: "true"
          - postgres_version: "16"
            # renovate datasource=docker depName=ghcr.io/cloudnative-pg/postgresql
            cnpg_version: 16.5-1
          - postgres_version: "15"
            # renovate datasource=docker depName=ghcr.io/cloudnative-pg/postgresql
            cnpg_version: 15.9-1
          - postgres_version: "14"
            # renovate datasource=docker depName=ghcr.io/cloudnative-pg/postgresql
            cnpg_version: 14.14-1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get versions
        id: versions
        env:
          CNPG_VERSION: ${{ matrix.cnpg_version }}
        run: |
          for component in CNPG TIMESCALE PGVECTOR PGVECTORSCALE; do
            version_var="${component}_VERSION"
            version="${!version_var}"
            {
              echo "${component,,}_version=$version"
              if [[ "$component" == "CNPG" ]]; then
                echo "${component,,}_minor=$(cut -d- -f1 <<<"$version")"
              else
                echo "${component,,}_minor=$(cut -d. -f-2 <<<"$version")"
              fi
              echo "${component,,}_major=$(cut -d. -f1 <<<"$version")"
            } >> $GITHUB_OUTPUT
          done

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/cnpg-ai
          flavor: latest=false
          tags: |
            type=raw,priority=1000,value=latest,enable=${{ matrix.latest || 'false' }}
            type=raw,priority=999,value=${{ steps.versions.outputs.cnpg_version }}-ts${{ steps.versions.outputs.timescale_version }}-pgv${{ steps.versions.outputs.pgvector_version }}-pgvs${{ steps.versions.outputs.pgvectorscale_version }}
            type=raw,priority=998,value=${{ steps.versions.outputs.cnpg_minor }}-ts${{ steps.versions.outputs.timescale_minor }}-pgv${{ steps.versions.outputs.pgvector_minor }}-pgvs${{ steps.versions.outputs.pgvectorscale_minor }}
            type=raw,priority=997,value=${{ steps.versions.outputs.cnpg_major }}-ts${{ steps.versions.outputs.timescale_major }}-pgv${{ steps.versions.outputs.pgvector_major }}-pgvs${{ steps.versions.outputs.pgvectorscale_major }}
            type=raw,priority=996,value=${{ steps.versions.outputs.cnpg_version }}
            type=raw,priority=995,value=${{ steps.versions.outputs.cnpg_minor }}
            type=raw,priority=994,value=${{ steps.versions.outputs.cnpg_major }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: .
          pull: true
          push: ${{ github.ref_name == 'main' }}
          platforms: linux/${{ matrix.platform == 'arm64' && 'arm64/v8' || matrix.platform }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            POSTGRES_VERSION=${{ matrix.postgres_version }}
            CLOUDNATIVEPG_VERSION=${{ steps.versions.outputs.cnpg_version }}
            TIMESCALE_VERSION=${{ steps.versions.outputs.timescale_version }}
            PGVECTOR_VERSION=${{ steps.versions.outputs.pgvector_version }}
            PGVECTORSCALE_VERSION=${{ steps.versions.outputs.pgvectorscale_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Summarize matrix https://github.community/t/status-check-for-a-matrix-jobs/127354/7
  build-success:
    name: Build Successful
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ always() }}
    steps:
      - if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        name: Check matrix status
        run: exit 1
